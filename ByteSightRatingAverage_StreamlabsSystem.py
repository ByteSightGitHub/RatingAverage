#Boost Software License - Version 1.0 - August 17th, 2003
#
#Permission is hereby granted, free of charge, to any person or organization
#obtaining a copy of the software and accompanying documentation covered by
#this license (the "Software") to use, reproduce, display, distribute,
#execute, and transmit the Software, and to prepare derivative works of the
#Software, and to permit third-parties to whom the Software is furnished to
#do so, all subject to the following:
#
#The copyright notices in the Software and this entire statement, including
#the above license grant, this restriction and the following disclaimer,
#must be included in all copies of the Software, in whole or in part, and
#all derivative works of the Software, unless such copies or derivative
#works are solely in the form of machine-executable object code generated by
#a source language processor.
#
#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
#SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
#FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
#ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
#DEALINGS IN THE SOFTWARE.

# Note: Script is based on the boilerplate code from the wiki: https://github.com/AnkhHeart/Streamlabs-Chatbot-Python-Boilerplate/wiki/Basic-Structure

#---------------------------
#   Import Libraries
#---------------------------
import os
import sys
import json
import re
import time
sys.path.append(os.path.join(os.path.dirname(__file__), "lib")) #point at lib folder for classes / references

import clr
clr.AddReference("IronPython.SQLite.dll")
clr.AddReference("IronPython.Modules.dll")

#   Import your Settings class
#from Settings_Module import MySettings

#---------------------------
#   [Required] Script Information
#---------------------------
ScriptName = "ByteSight Rating Average"
Website = "https://github.com/ByteSightGitHub"
Description = "Calculates rating averages based on ratings in the chat"
Creator = "ByteSight"
Version = "1.1.0.0"

#---------------------------
#   Configuration
#---------------------------
global votingTime
global votingCooldown
global debugAllowMultiVote
global startMessage
global endMessage
votingTime = 20
votingCooldown = 20
debugAllowMultiVote = False
startMessage = "Rating started, you have {0} seconds!"
endMessage = "Time's up! Final rating is: {:.1f}"

#---------------------------
#   [Required] Initialize Data (Only called on load)
#---------------------------
def Init():
	global l_RatedUsers
	global l_Ratings
	global re_VotingPattern
	global b_RatingInProgress
	global t_StartTime
	global t_LastEndTime
	l_RatedUsers = []
	l_Ratings = []
	re_VotingPattern = re.compile("^[0-9][0-9]?[\.,]?[0-9]*$")
	b_RatingInProgress = False
	t_StartTime = time.time()
	t_LastEndTime = None
	return

def AddRating(user, rating):
	global l_RatedUsers
	global l_Ratings
	rating = rating.replace(",", ".")
	ratingFloat = float(rating)
	if ratingFloat > 10:
		ratingFloat = 10
	if ratingFloat < 0:
		ratingFloat = 0
	Debug("Registered rating: {0} by {1}".format(ratingFloat, user))
	l_RatedUsers.append(user)
	l_Ratings.append(ratingFloat)
	return

def IsTimeUp():
	global t_StartTime
	currentTime = time.time()
	timeElapsed = currentTime - t_StartTime
	return timeElapsed >= votingTime

def IsCooldown():
	global t_LastEndTime
	if t_LastEndTime is None:
		Debug("Last end time not set")
		return False
	else:
		currentTime = time.time()
		timeElapsed = currentTime - t_LastEndTime
		Debug("Last end time was {0} seconds ago.".format(timeElapsed))
		return timeElapsed < votingCooldown

def Debug(msg):
	#Parent.SendStreamMessage("DEBUG: {0}".format(msg));
	return
	
def StartRating():
	global l_RatedUsers
	global l_Ratings
	global b_RatingInProgress
	global t_StartTime
	l_RatedUsers = []
	l_Ratings = []
	b_RatingInProgress = True
	t_StartTime = time.time()
	
def EndRating():
	global b_RatingInProgress
	global t_LastEndTime
	b_RatingInProgress = False
	t_LastEndTime = time.time()
	finalRating = float(sum(l_Ratings) / len(l_Ratings))
	Parent.SendStreamMessage(endMessage.format(finalRating))
	
#---------------------------
#   [Required] Execute Data / Process messages
#---------------------------
def Execute(data):
	global b_RatingInProgress
	if b_RatingInProgress and IsTimeUp():
		EndRating()
	elif data.IsChatMessage() and re_VotingPattern.match(data.Message):
		if b_RatingInProgress:
			if debugAllowMultiVote or (data.UserName not in l_RatedUsers):
				AddRating(data.UserName, data.Message)
		else:
			if IsCooldown():
				Debug("Rating is on cooldown");
			else:
				StartRating()
				AddRating(data.UserName, data.Message)
				Parent.SendStreamMessage(startMessage.format(votingTime))
	return
	
#---------------------------
#   [Required] Tick method (Gets called during every iteration even when there is no incoming data)
#---------------------------
def Tick():
	global b_RatingInProgress
	if b_RatingInProgress and IsTimeUp():
		Debug("Rating timeout")
		EndRating()
	return
