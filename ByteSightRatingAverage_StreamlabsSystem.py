#Boost Software License - Version 1.0 - August 17th, 2003
#
#Permission is hereby granted, free of charge, to any person or organization
#obtaining a copy of the software and accompanying documentation covered by
#this license (the "Software") to use, reproduce, display, distribute,
#execute, and transmit the Software, and to prepare derivative works of the
#Software, and to permit third-parties to whom the Software is furnished to
#do so, all subject to the following:
#
#The copyright notices in the Software and this entire statement, including
#the above license grant, this restriction and the following disclaimer,
#must be included in all copies of the Software, in whole or in part, and
#all derivative works of the Software, unless such copies or derivative
#works are solely in the form of machine-executable object code generated by
#a source language processor.
#
#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
#SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
#FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
#ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
#DEALINGS IN THE SOFTWARE.

# Note: Script is based on the boilerplate code from the wiki: https://github.com/AnkhHeart/Streamlabs-Chatbot-Python-Boilerplate/wiki/Basic-Structure

#---------------------------
#   Import Libraries
#---------------------------
import os
import sys
import json
import re
import time
sys.path.append(os.path.join(os.path.dirname(__file__), "lib")) #point at lib folder for classes / references

import clr
clr.AddReference("IronPython.SQLite.dll")
clr.AddReference("IronPython.Modules.dll")

from VoteParser import VoteParser

from collections import defaultdict

#   Import your Settings class
#from Settings_Module import MySettings

#---------------------------
#   [Required] Script Information
#---------------------------
ScriptName = "ByteSight Rating Average"
Website = "https://github.com/ByteSightGitHub"
Description = "Calculates rating averages based on ratings in the chat"
Creator = "ByteSight"
Version = "1.2.0.0"

#---------------------------
#   Commands
#---------------------------
command_Start = "!start" # Not actually command, just used for the cooldown manager
command_Help = "!help"
command_Version = "!version"

#---------------------------
#   Configuration
#---------------------------
global enableDebugging
global votingTime
global votingCooldown
global startMessage
global endMessage
global helpMessage
enableDebugging = False
votingTime = 20
votingCooldown = 20
startMessage = "Rating started, you have {0} seconds!"
endMessage = "Time's up! Final rating: {0}"
helpMessage = "Give your rating as a number between 0 and 10 with or without decimal places, e.g. 7 or 7.1. Use plus sign for multivote (7.1 + 3.4). Voting again before time is up replaces previous vote(s)."

#---------------------------
#   [Required] Initialize Data (Only called on load)
#---------------------------
def Init():
	global parser
	global d_Ratings
	global b_RatingInProgress
	global t_StartTime
	parser = VoteParser()
	d_Ratings = defaultdict(list)
	b_RatingInProgress = False
	t_StartTime = time.time()
	return

def AddRating(user, values):
	global d_Ratings
	Debug("Registered rating: {0} by {1}".format(values, user))
	d_Ratings[user] = values
	return

def IsTimeUp():
	global t_StartTime
	currentTime = time.time()
	timeElapsed = currentTime - t_StartTime
	return timeElapsed >= votingTime

def IsCooldown():
	DebugCooldown(command_Start)
	return Parent.IsOnCooldown(ScriptName, command_Start)

def Debug(msg):
	if enableDebugging:
		Parent.SendStreamMessage("DEBUG: {0}".format(msg));

def DebugCooldown(command):
	if enableDebugging:
		Debug("Remaining cooldown for '{0}': {1} seconds".format(command, Parent.GetCooldownDuration(ScriptName, command)))
		
def StartRating():
	global d_Ratings
	global b_RatingInProgress
	global t_StartTime
	d_Ratings = defaultdict(list)
	b_RatingInProgress = True
	t_StartTime = time.time()
	
def EndRating():
	global d_Ratings
	global b_RatingInProgress
	b_RatingInProgress = False
	Parent.AddCooldown(ScriptName, command_Start, 30)
	finalRatings = parser.calculateResults(d_Ratings)
	finalRatingsRounded = ["{:.1f}".format(float(x)) for x in finalRatings]
	finalRatingsString = " + ".join(finalRatingsRounded)
	Parent.SendStreamMessage(endMessage.format(finalRatingsString))

def ShowHelp():
	Parent.SendStreamMessage(helpMessage)

def ShowVersion():
	Parent.SendStreamMessage("My version is: {0}".format(Version))
	
def HandleCommands(data):
	if (not data.IsChatMessage()) or (not data.IsWhisper()) or (not data.Message.startswith("!")):
		return False
	parts = data.Message.split(" ")
	command = parts[0]
	if Parent.IsOnCooldown(ScriptName, command):
		DebugCooldown(command)
		return True
	if data.Message == command_Help:
		Parent.AddCooldown(ScriptName, command_Help, 30)
		ShowHelp()
	if data.Message == command_Version:
		Parent.AddCooldown(ScriptName, command_Version, 30)
		ShowVersion()
	return True
	
#---------------------------
#   [Required] Execute Data / Process messages
#---------------------------
def Execute(data):
	global b_RatingInProgress
	if HandleCommands(data) == True:
		return
	if b_RatingInProgress and IsTimeUp():
		EndRating()
	elif data.IsChatMessage():
		(valid, values) = parser.tryParseVote(data.Message)
		if(valid):
			if b_RatingInProgress:
				AddRating(data.UserName, values)
			else:
				if IsCooldown():
					Debug("Rating is on cooldown");
				else:
					StartRating()
					AddRating(data.UserName, values)
					Parent.SendStreamMessage(startMessage.format(votingTime))
	return
	
#---------------------------
#   [Required] Tick method (Gets called during every iteration even when there is no incoming data)
#---------------------------
def Tick():
	global b_RatingInProgress
	if b_RatingInProgress and IsTimeUp():
		Debug("Rating timeout")
		EndRating()
	return
