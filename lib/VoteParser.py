#Boost Software License - Version 1.0 - August 17th, 2003
#
#Permission is hereby granted, free of charge, to any person or organization
#obtaining a copy of the software and accompanying documentation covered by
#this license (the "Software") to use, reproduce, display, distribute,
#execute, and transmit the Software, and to prepare derivative works of the
#Software, and to permit third-parties to whom the Software is furnished to
#do so, all subject to the following:
#
#The copyright notices in the Software and this entire statement, including
#the above license grant, this restriction and the following disclaimer,
#must be included in all copies of the Software, in whole or in part, and
#all derivative works of the Software, unless such copies or derivative
#works are solely in the form of machine-executable object code generated by
#a source language processor.
#
#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
#SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
#FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
#ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
#DEALINGS IN THE SOFTWARE.

import re
from collections import defaultdict

class VoteParser:
	# class variables
	re_VotingPattern = re.compile("^[0-9][0-9]?[\.,]?[0-9]*$")

	def validSingleVote(self, input):
		return self.re_VotingPattern.match(input)

	def tryParseVote(self, raw):
		input = raw.replace(",", ".")
		split_input = re.split("&|\+", input)
		split_input = list(filter(lambda x: (x != ""), split_input))
		split_input = [s.strip() for s in split_input]
		if(len(split_input) == 0):
			return (False, None)
		values = []
		for candidate in split_input:
			if(not self.validSingleVote(candidate)):
				return (False, None)
			ratingFloat = float(candidate)
			if ratingFloat > 10:
				ratingFloat = 10.0
			if ratingFloat < 0:
				ratingFloat = 0.0
			values.append(ratingFloat)
		# If we get here then all parts of the message were valid ratings
		return (True, values)
	
	def calculateResults(self, ratings):
		# group first votes, second votes etc.
		grouped = defaultdict(list)
		for votes in ratings.values():
			for index, vote in enumerate(votes):
				grouped[index].append(vote)
		values = [sum(x)/len(x) for x in grouped.values()]
		return values;
